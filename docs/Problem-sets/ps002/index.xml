<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Problem set 2 on Showcase</title><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/</link><description>Recent content in Problem set 2 on Showcase</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/001/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/001/</guid><description> Exercise 01 # Study a hidden surface determination algorithm such as the painter’s algorithm, binary space partitioning, the Warnock algorithm or ray casting. Introducción # Antecedentes # Consideraciones # Código # Conclusiones # Trabajo futuro # Referencias #</description></item><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/002/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/002/</guid><description> Exercise 02 # Figure it out the js code of the above sketches. Implement other blending modes. Take this reference as starting point. Introducción # Antecedentes # Consideraciones # Código # Conclusiones # Trabajo futuro # Referencias #</description></item><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/003/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/003/</guid><description> Exercise 03 # Implement other coloring brightness tools such as HSV value V, HSL lightness L or Component average. Implement texture tinting by mixing color and texel interpolated data. Introducción # Antecedentes # Consideraciones # Código # Conclusiones # Trabajo futuro # Referencias #</description></item><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/004/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/004/</guid><description>Exercise 04 # Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask.Hint: circular regions around the mouse pointer are handy and quite simple to implement by means of glsl distance. A magnifier tool. Requires a bit of research. For instance, look for it in shadertoy. Integrate luma and other coloring brightness tools.</description></item><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/005/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/005/</guid><description> Exercise 05 # Adapt other patterns from the book of shaders (refer also to the shadertoy collection) and map them as textures onto other 3D shapes. Introducción # Antecedentes # Consideraciones # Código # Conclusiones # Trabajo futuro # Referencias #</description></item><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/006/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/006/</guid><description> Exercise 06 # Implement your own source dataset and a mechanism to select different images from it. Implement a pixelator in software that doesn’t use spatial coherence and compare the results with those obtained here. Introducción # Antecedentes # Consideraciones # Código # Conclusiones # Trabajo futuro # Referencias #</description></item><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/007/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/007/</guid><description> Exercise 07 # Implement a mosaic visual application. Introducción # Antecedentes # Consideraciones # Código # Conclusiones # Trabajo futuro # Referencias #</description></item><item><title/><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/008/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/008/</guid><description> Exercise 08 # Implement some posteffects you find interesting. Introducción # Antecedentes # Consideraciones # Código # Conclusiones # Trabajo futuro # Referencias #</description></item><item><title>Procesamiento de imágenes</title><link>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/image-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://judelgadoc.github.io/visualcomputing/docs/Problem-sets/ps002/image-processing/</guid><description>Ejercicio # Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask.Hint: circular regions around the mouse pointer are handy and quite simple to implement by means of glsl distance. A magnifier tool. Requires a bit of research. For instance, look for it in shadertoy. Integrate luma and other coloring brightness tools.</description></item></channel></rss>